<?xml version="1.0" encoding="UTF-8"?><rss xmlns:dc="http://purl.org/dc/elements/1.1/" xmlns:content="http://purl.org/rss/1.0/modules/content/" xmlns:atom="http://www.w3.org/2005/Atom" version="2.0"><channel><title><![CDATA[Interviewing Blog]]></title><description><![CDATA[My personal blog to document code I write while preparing for technical interviews.]]></description><link>https://imtiaz101325.github.io/interviewing</link><generator>GatsbyJS</generator><lastBuildDate>Sun, 10 May 2020 10:37:27 GMT</lastBuildDate><item><title><![CDATA[Time Complexity]]></title><description><![CDATA[People who write code everyday in their jobs have many things to consider while building software. They need to keep their code maintainable…]]></description><link>https://imtiaz101325.github.io/interviewing/time-complexity/</link><guid isPermaLink="false">https://imtiaz101325.github.io/interviewing/time-complexity/</guid><pubDate>Sun, 10 May 2020 00:00:00 GMT</pubDate><content:encoded>&lt;p&gt;People who write code everyday in their jobs have many things to consider while building software. They need to keep their code maintainable and well documented. They must also sometimes worry about scale and performance. How does an engineer know if their solution is a good one? Among the things that they could measure are running time and memory usage. This leads them to two important questions:&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;How long does my program take to run?&lt;/li&gt;
&lt;li&gt;How much memory does my program take to run?&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;To answer these questions we might try to time our functions or inspect how much memory our software uses. Here is one such attempt:&lt;/p&gt;
&lt;div class=&quot;gatsby-highlight&quot; data-language=&quot;js&quot;&gt;&lt;pre class=&quot;language-js&quot;&gt;&lt;code class=&quot;language-js&quot;&gt;&lt;span class=&quot;token keyword&quot;&gt;function&lt;/span&gt; &lt;span class=&quot;token function&quot;&gt;fastCode&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;
  &lt;span class=&quot;token keyword&quot;&gt;for&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;i &lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;token number&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt; i &lt;span class=&quot;token operator&quot;&gt;&amp;lt;&lt;/span&gt; &lt;span class=&quot;token number&quot;&gt;50000&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt; &lt;span class=&quot;token operator&quot;&gt;++&lt;/span&gt;i&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;token comment&quot;&gt;// do something&lt;/span&gt;
  &lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;
&lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;

console&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;token function&quot;&gt;time&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token string&quot;&gt;&quot;fastCode&quot;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;

&lt;span class=&quot;token function&quot;&gt;fastCode&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;

console&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;token function&quot;&gt;timeEnd&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token string&quot;&gt;&quot;fastCode&quot;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;
&lt;span class=&quot;token comment&quot;&gt;// fastCode: 23ms - timer ended&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;However the &lt;em&gt;performance&lt;/em&gt; of this code depends on the machine. Adding exact running time does not show us how our code would perform on a grand scale. It can have different exact times on different hardware. The way we define the running time of our algorithm should be independent of the hardware it is running on.&lt;/p&gt;
&lt;p&gt;So instead of performance we need to think about the &lt;em&gt;complexity&lt;/em&gt; of our code. Instead of asking “how much time does it take to run?”, we could ask “how does our function grow?“. For example, imagine we are tasked with setting up a place where students can learn to code. We could setup a physical classroom that needs assets like space, table, chair etc. If we want to grow the size of our classroom we need to add more tables and chairs. If we try to scale this to thousands of students it can become a very daunting task very soon. However, imagine we, instead, setup a virtual classroom. This way we no longer need to manage the physical assets we needed on the previous solution and our task becomes much simpler.&lt;/p&gt;
&lt;p&gt;To put our analogy in context of code let us look at two searching algorithms and compare them. We are going to define some simple searching algorithms in JavaScript. The functions will take an input of sorted list of numbers as the first parameter and will return the index it finds that matches the number in the second parameter:&lt;/p&gt;
&lt;h3&gt;Linear Search&lt;/h3&gt;
&lt;div class=&quot;gatsby-highlight&quot; data-language=&quot;js&quot;&gt;&lt;pre class=&quot;language-js&quot;&gt;&lt;code class=&quot;language-js&quot;&gt;&lt;span class=&quot;token keyword&quot;&gt;function&lt;/span&gt; &lt;span class=&quot;token function&quot;&gt;linearSearch&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token parameter&quot;&gt;numbers&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt; element&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;
  &lt;span class=&quot;token keyword&quot;&gt;for&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token keyword&quot;&gt;let&lt;/span&gt; i &lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;token number&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt; i &lt;span class=&quot;token operator&quot;&gt;&amp;lt;&lt;/span&gt; numbers&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;length&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt; i&lt;span class=&quot;token operator&quot;&gt;++&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;token keyword&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;numbers&lt;span class=&quot;token punctuation&quot;&gt;[&lt;/span&gt;i&lt;span class=&quot;token punctuation&quot;&gt;]&lt;/span&gt; &lt;span class=&quot;token operator&quot;&gt;===&lt;/span&gt; element&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;
      &lt;span class=&quot;token keyword&quot;&gt;return&lt;/span&gt; i&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;
    &lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;
  &lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;

  &lt;span class=&quot;token comment&quot;&gt;// not found&lt;/span&gt;
  &lt;span class=&quot;token keyword&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;token operator&quot;&gt;-&lt;/span&gt;&lt;span class=&quot;token number&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;
&lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;h3&gt;Binary Search&lt;/h3&gt;
&lt;div class=&quot;gatsby-highlight&quot; data-language=&quot;js&quot;&gt;&lt;pre class=&quot;language-js&quot;&gt;&lt;code class=&quot;language-js&quot;&gt;&lt;span class=&quot;token keyword&quot;&gt;function&lt;/span&gt; &lt;span class=&quot;token function&quot;&gt;binarySearch&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token parameter&quot;&gt;numbers&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt; element&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;
  &lt;span class=&quot;token keyword&quot;&gt;let&lt;/span&gt; startIndex &lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;token number&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;
  &lt;span class=&quot;token keyword&quot;&gt;let&lt;/span&gt; endIndex &lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt; numbers&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;length &lt;span class=&quot;token operator&quot;&gt;-&lt;/span&gt; &lt;span class=&quot;token number&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;

  &lt;span class=&quot;token keyword&quot;&gt;while&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;startIndex &lt;span class=&quot;token operator&quot;&gt;&amp;lt;=&lt;/span&gt; endIndex&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;token comment&quot;&gt;// find mid position&lt;/span&gt;
    &lt;span class=&quot;token keyword&quot;&gt;const&lt;/span&gt; middle &lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt; Math&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;token function&quot;&gt;floor&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;endIndex &lt;span class=&quot;token operator&quot;&gt;+&lt;/span&gt; startIndex&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;token operator&quot;&gt;/&lt;/span&gt; &lt;span class=&quot;token number&quot;&gt;2&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;

    &lt;span class=&quot;token keyword&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;numbers&lt;span class=&quot;token punctuation&quot;&gt;[&lt;/span&gt;middle&lt;span class=&quot;token punctuation&quot;&gt;]&lt;/span&gt; &lt;span class=&quot;token operator&quot;&gt;===&lt;/span&gt; element&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;
      &lt;span class=&quot;token keyword&quot;&gt;return&lt;/span&gt; middle&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;
    &lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;

    &lt;span class=&quot;token keyword&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;numbers&lt;span class=&quot;token punctuation&quot;&gt;[&lt;/span&gt;middle&lt;span class=&quot;token punctuation&quot;&gt;]&lt;/span&gt; &lt;span class=&quot;token operator&quot;&gt;&amp;lt;&lt;/span&gt; element&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;
      &lt;span class=&quot;token comment&quot;&gt;// if the number in the middle is smaller&lt;/span&gt;
      &lt;span class=&quot;token comment&quot;&gt;// then the element is on the right side&lt;/span&gt;
      startIndex &lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt; middle &lt;span class=&quot;token operator&quot;&gt;+&lt;/span&gt; &lt;span class=&quot;token number&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;
    &lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt; &lt;span class=&quot;token keyword&quot;&gt;else&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;
      &lt;span class=&quot;token comment&quot;&gt;// if the number in the middle is larger&lt;/span&gt;
      &lt;span class=&quot;token comment&quot;&gt;// then the element is on the left side&lt;/span&gt;
      endIndex &lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt; middle &lt;span class=&quot;token operator&quot;&gt;-&lt;/span&gt; &lt;span class=&quot;token number&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;
    &lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;
  &lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;

  &lt;span class=&quot;token comment&quot;&gt;// not found&lt;/span&gt;
  &lt;span class=&quot;token keyword&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;token operator&quot;&gt;-&lt;/span&gt;&lt;span class=&quot;token number&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;
&lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;Our code take different time or space depending on the size of the input. In other words complexity depends on the size of the problem.&lt;/p&gt;
&lt;p&gt;Even for the same algorithm there can be different times based on how our data is organized.&lt;/p&gt;
&lt;p&gt;could show how different sized inputs have different running time&lt;/p&gt;
&lt;p&gt;could insert code from binary search and show how it works for small and large numbers of inputs.&lt;/p&gt;
&lt;h2&gt;Asymptotic analysis&lt;/h2&gt;
&lt;p&gt;Asymptotic analysis is the study of algorithm’s growth rate.&lt;/p&gt;
&lt;p&gt;Asymptote: nature of a function as it reaches a very large value and is “bounded”&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;./asymptote.png&quot; alt=&quot;asymptote&quot;&gt;&lt;/p&gt;
&lt;p&gt;We can really see how our code is performing at the tail end of the asymptotic function.&lt;/p&gt;
&lt;p&gt;We are mostly interested in the algorithm’s worst possible running time. Since the best case could be as simple as running a single set of instructions.&lt;/p&gt;
&lt;p&gt;Asymptotic notation:&lt;/p&gt;
&lt;h2&gt;Big Oh O(n)&lt;/h2&gt;
&lt;p&gt;The Big-O notation shows us the asymptotic upper bound of our code as in the time of space needed for the worst case. In other word it is a ceiling on the growth of the code we are analyzing.&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;./big-oh.png&quot; alt=&quot;big oh&quot;&gt;&lt;/p&gt;
&lt;p&gt;O(g(n)) = { f(n): there exist positive constants c and n&lt;sub&gt;0&lt;/sub&gt;
such that 0 ≤ f(n) ≤ cg(n) for all n ≥ n&lt;sub&gt;0&lt;/sub&gt; }&lt;/p&gt;
&lt;p&gt;We need to tighten our bound&lt;/p&gt;
&lt;h2&gt;Big omega&lt;/h2&gt;
&lt;p&gt;best case&lt;/p&gt;
&lt;p&gt;floor growth rate&lt;/p&gt;
&lt;p&gt;asymptotic lower bound&lt;/p&gt;
&lt;p&gt;The least work we can do or the fastest our code can run.&lt;/p&gt;
&lt;h2&gt;Big theta&lt;/h2&gt;
&lt;p&gt;Exact bound&lt;/p&gt;
&lt;p&gt;asymptotically tight bound&lt;/p&gt;
&lt;h2&gt;How&lt;/h2&gt;
&lt;p&gt;Total running time of a function in found by adding the running time of all of the statements in the function. Simple operations take constant time O(1). For conditional statement, the branch that takes the most time is considered. For loops, we multiply the time complexity of the statements within the loop by the number of times the loop is run. So, a loop that runs some constant time operations &lt;code class=&quot;language-text&quot;&gt;n&lt;/code&gt; times is said to have O(n) complexity. Following that train of thought: a loop with &lt;code class=&quot;language-text&quot;&gt;n&lt;/code&gt; iterations which has another loop with &lt;code class=&quot;language-text&quot;&gt;m&lt;/code&gt; iterations has a complexity of O(n*m) given that the loops contain constant time operations.&lt;/p&gt;
&lt;p&gt;We can show a line graph&lt;/p&gt;
&lt;p&gt;T(n) = an + b&lt;/p&gt;
&lt;p&gt;-&gt; big oh is O(n) dropping a and b&lt;/p&gt;
&lt;p&gt;for quadratic time&lt;/p&gt;
&lt;p&gt;T(n) = cn&lt;sup&gt;2&lt;/sup&gt; + dn + e&lt;/p&gt;
&lt;p&gt;here the graph of n&lt;sup&gt;2&lt;/sup&gt; grows much faster than dn&lt;/p&gt;
&lt;p&gt;so complexity is O(n&lt;sup&gt;2&lt;/sup&gt;)&lt;/p&gt;
&lt;p&gt;show line by line complexity&lt;/p&gt;
&lt;h2&gt;Commonly found complexities&lt;/h2&gt;
&lt;table&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th&gt;Notation&lt;/th&gt;
&lt;th&gt;Name&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;
&lt;tbody&gt;
&lt;tr&gt;
&lt;td&gt;O(1)&lt;/td&gt;
&lt;td&gt;Constant&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;O(log(n))&lt;/td&gt;
&lt;td&gt;Logarithmic&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;O(n)&lt;/td&gt;
&lt;td&gt;Linear&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;O(nlog(n))&lt;/td&gt;
&lt;td&gt;Log-linear&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;O(n&lt;sup&gt;2&lt;/sup&gt;)&lt;/td&gt;
&lt;td&gt;Quadratic&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;O(n&lt;sup&gt;c&lt;/sup&gt;)&lt;/td&gt;
&lt;td&gt;Polynomial&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;O(c&lt;sup&gt;n&lt;/sup&gt;)&lt;/td&gt;
&lt;td&gt;Exponential&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;
&lt;p&gt;&lt;img src=&quot;common-big-o.png&quot; alt=&quot;common cases&quot;&gt;&lt;/p&gt;</content:encoded></item><item><title><![CDATA[My Blog Setup]]></title><description><![CDATA[A simple start I had delayed writing a blog for a long time because I wanted to make it perfect. The time never came where I got around to…]]></description><link>https://imtiaz101325.github.io/interviewing/blog-setup/</link><guid isPermaLink="false">https://imtiaz101325.github.io/interviewing/blog-setup/</guid><pubDate>Fri, 08 May 2020 00:00:00 GMT</pubDate><content:encoded>&lt;h1&gt;A simple start&lt;/h1&gt;
&lt;p&gt;I had delayed writing a blog for a long time because I wanted to make it perfect. The time never came where I got around to doing that. So for this blog I decided to just start something and let it grow.&lt;/p&gt;
&lt;p&gt;I had my eyes on &lt;a href=&quot;https://www.gatsbyjs.org/&quot;&gt;Gatsby&lt;/a&gt; for a long time. And I love the idea of using Markdown to write my blog posts. Which is why it only felt natural for me to use their &lt;a href=&quot;https://www.gatsbyjs.org/starters/gatsbyjs/gatsby-starter-blog/&quot;&gt;official starter blog boilerplate&lt;/a&gt; to get up and running. You can start your own blog this way by following &lt;a href=&quot;https://www.gatsbyjs.org/tutorial/&quot;&gt;their tutorials&lt;/a&gt;. I did not change anything apart from the configuration for now. I am hoping to add more features incrementally in the future.&lt;/p&gt;
&lt;p&gt;Since the content is mostly static I am going to use &lt;a href=&quot;https://pages.github.com/&quot;&gt;GitHub Pages&lt;/a&gt; to deploy my blog. For now I would like to keep things simple this way.&lt;/p&gt;</content:encoded></item><item><title><![CDATA[Hello World]]></title><description><![CDATA[This is my first blog post. I have not written in a long time. I do not hate writing. But I guess I have been suffering from a prolonged…]]></description><link>https://imtiaz101325.github.io/interviewing/hello-world/</link><guid isPermaLink="false">https://imtiaz101325.github.io/interviewing/hello-world/</guid><pubDate>Fri, 08 May 2020 00:00:00 GMT</pubDate><content:encoded>&lt;p&gt;This is my first blog post. I have not written in a long time.&lt;/p&gt;
&lt;p&gt;I do not hate writing. But I guess I have been suffering from a prolonged writer’s block.&lt;/p&gt;
&lt;p&gt;But I am back!&lt;/p&gt;</content:encoded></item></channel></rss>